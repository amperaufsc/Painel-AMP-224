#include <Arduino.h>
#include <stdlib.h>
#include <driver/adc.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "driver/gpio.h"
#include "driver/uart.h"
#include "driver/can.h"
#include "EasyNextionLibrary.h" //Library do Display

//Configuração chave seletora
#define SELECTOR_PIN_1 GPIO_NUM_23
#define SELECTOR_PIN_2 GPIO_NUM_22
#define SELECTOR_PIN_3 GPIO_NUM_21
#define SELECTOR_PIN_4 GPIO_NUM_19
#define SELECTOR_PIN_5 GPIO_NUM_18
portMUX_TYPE selectorMux = portMUX_INITIALIZER_UNLOCKED; 

//Declaração das variáveis
uint16_t power = 0, SelectorPosition = 0, lastPosition = 0, accumulatorTemp, apps = 0, RTD, REGEN = 0, GPS, motorTemp, lowVoltage, StateofCharge, fault_bms, fault_inv, fault_ecu, inversorVoltage, RPM;
float speed = 0, highVoltage;
long double accumulatorCurrent;
int diferentialValue = 0; //valor do potenciometro do diferencial
int CurrentForm = 0; // variavel para controle da página atual
int period = 100; // tempo entre envio de dados para o display
unsigned long time_now = 0; // variavel para controle de envio de dados para o display
bool display_lock = false; // false: pode mudar a página, true: nao pode mudar a página
bool botao = false;

//Declaracao RTC
uint8_t month = 0;
uint8_t day = 0;
uint8_t hour = 0;
uint8_t minute = 0;
uint8_t sec = 0;

#define REGEN_PIN GPIO_NUM_15
portMUX_TYPE REGENbutton = portMUX_INITIALIZER_UNLOCKED;

#define CAN_TX_PIN GPIO_NUM_17
#define CAN_RX_PIN GPIO_NUM_16

EasyNex myNex(Serial2); //definir o Serial2 como serial do display

//Declaração das tarefas
TaskHandle_t Task1 = NULL;
TaskHandle_t Task2 = NULL;
TaskHandle_t Task3 = NULL;


void setupCan(){
  can_general_config_t g_config = CAN_GENERAL_CONFIG_DEFAULT(CAN_TX_PIN, CAN_RX_PIN, CAN_MODE_NORMAL);
  can_timing_config_t t_config = CAN_TIMING_CONFIG_500KBITS();
  can_filter_config_t f_config;
  f_config.acceptance_code = (0x7FF << 21);
  f_config.acceptance_mask = ~(0x020 << 21);
  f_config.single_filter = true;

  
  if(can_driver_install(&g_config, &t_config, &f_config) == ESP_OK){
    // This installs the CAN driver
    Serial.print("CAN driver installed\n");
  }
  if (can_start() == ESP_OK) {
    // This starts the CAN driver
    Serial.print("CAN driver started\n");
  }
}

/*
  functions of each task
  TASK1 -> CITEX selector and regen button handling
  TASK2 -> update display
  TASK3 -> CAN BUS
*/

void Task1code( void * pvParameters ) //task do seletor e regen
{
  while(1)
  {
    vTaskDelay(400 / portTICK_PERIOD_MS);
    //Mudança da chave seletora
    if (display_lock == false){ 
      if (SelectorPosition != CurrentForm && SelectorPosition == 0)
      {
        myNex.writeStr("page page0");
        CurrentForm = 0;
        //Serial.print("page0");
      }
      if (SelectorPosition != CurrentForm && SelectorPosition == 1)
      {
        myNex.writeStr("page page1");
        CurrentForm = 1;
        Serial.print("page1");
      }
      if (SelectorPosition != CurrentForm && SelectorPosition == 2)
      {
        myNex.writeStr("page page2");
        CurrentForm = 2;
        Serial.print("page2");
      }
      if (SelectorPosition != CurrentForm && SelectorPosition == 3)
      {
        myNex.writeStr("page page3");
        CurrentForm = 3;
        Serial.print("page3");
      }
      if (SelectorPosition != CurrentForm && SelectorPosition == 4)
      {
        myNex.writeStr("page page4");
        CurrentForm = 4;
        Serial.print("page4");
      }
      display_lock = true;
    }
  
  //Acionamento do botão REGEN no volante
  if (digitalRead(REGEN_PIN)==HIGH) {
      botao = HIGH;
      
    }
  else { botao = LOW;
      
  }
  Serial.println(botao);
  vTaskDelay(30 / portTICK_PERIOD_MS);
  }
}

void Task2code( void * pvParameters )
{
  while(1)
  {
    //Atualização dos objetos do painel
    vTaskDelay(10 / portTICK_PERIOD_MS);
    //Serial.println("------------Entrou 2----------------");
    if (millis() >= time_now + period){ //update display variables every 100 miliseconds 
      time_now += period;
      switch (CurrentForm) // Varia com a página atual do display
      {   month = myNex.readNumber("n1.val");
          day = myNex.readNumber("n0.val");
          hour = myNex.readNumber("n3.val");
          minute = myNex.readNumber("n4.val");
          sec = myNex.readNumber("n5.val");
        case 1: //TESTE RTC
          month = myNex.readNumber("n1.val");
          day = myNex.readNumber("n0.val");
          hour = myNex.readNumber("n3.val");
          minute = myNex.readNumber("n4.val");
          sec = myNex.readNumber("n5.val");
        break;
        case 2: //Testes
          myNex.writeNum("n0.val", highVoltage); //Tensão
          myNex.writeNum("n1.val", inversorVoltage); //Tensão Inversão
          myNex.writeNum("n2.val", accumulatorCurrent); //Corrente Acumulador
          myNex.writeNum("n3.val", StateofCharge); //SOC
          myNex.writeNum("n4.val", motorTemp); //temperatura Motores
          myNex.writeNum("n5.val", accumulatorTemp); //Temperatura Acumulador
          myNex.writeNum("n6.val", fault_bms); //Erro BMS
          myNex.writeNum("n7.val", fault_inv); //Erro Inversor
          myNex.writeNum("n8.val", fault_ecu); //Erro ECU
          month = myNex.readNumber("page0.n1.val");
          day = myNex.readNumber("page0.n0.val");
          hour = myNex.readNumber("page0.n3.val");
          minute = myNex.readNumber("page0.n4.val");
          sec = myNex.readNumber("page0.n5.val");
        break;
        case 3: //provas curtas
          myNex.writeNum("n0.val", speed); //Velocidade
          myNex.writeNum("n1.val", power); //Potência dos motores
          month = myNex.readNumber("page0.n1.val");
          day = myNex.readNumber("page0.n0.val");
          hour = myNex.readNumber("page0.n3.val");
          minute = myNex.readNumber("page0.n4.val");
          sec = myNex.readNumber("page0.n5.val");
        break;
        case 4: //Endurance
          myNex.writeNum("n0.val", speed); //Velocidade
          //myNex.writeNum("n1.val", 30); //Temp. freio
          myNex.writeNum("n2.val", StateofCharge); //Baterias (%)
          month = myNex.readNumber("page0.n1.val");
          day = myNex.readNumber("page0.n0.val");
          hour = myNex.readNumber("page0.n3.val");
          minute = myNex.readNumber("page0.n4.val");
          sec = myNex.readNumber("page0.n5.val");
        default:
        break; 
      }
    }
